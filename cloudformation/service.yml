AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy a service on AWS Fargate, hosted in a public subnet, and accessible via a public load balancer.
Parameters:
  EnvironmentName:
    Type: String
    Default: production
    Description: The name of the environment to add this service to
  ServiceName:
    Type: String
    Default: nuxt-app
    Description: A name for the service
  ImageUrl:
    Type: String
    Description: The url of a docker image that contains the application process that will handle the traffic for this service
  ContainerPort:
    Type: Number
    Default: 3000
    Description: What port number the application inside the docker container is binding to
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container
  LoadBalancerPath:
    Type: String
    Default: "*"
    Description: A path on the load balancer that this service should be connected to. Use * to send all load balancer traffic to this service.
  LoadBalancerPriority:
    Type: Number
    Default: 1
    Description: The priority for the routing rule added to the load balancer.  This only applies if you have multiple services which have been assigned to different paths on the load balancer.
  DesiredCount:
    Type: Number
    Default: 2
    Description: How many copies of the service task to run
  Role:
    Type: String
    Default: ""
    Description: (Optional) An IAM role to give the service's containers if the code within needs to access other AWS resources like S3 buckets, DynamoDB tables, etc

  DBInstanceClass:
    Type: String
    Default: db.t3.micro
    Description: The instance type of the RDS database
  DBEngine:
    Type: String
    Default: postgres
    Description: The database engine
  DBAllocatedStorage:
    Type: Number
    Default: 20
    Description: The allocated storage for NAMEthe RDS instance in GB

  DBPort:
    Type: String
    Description: The port for the database
  DBName:
    Type: String
    Description: The database name
  DBUsername:
    Type: String
    Description: The username for the database
    NoEcho: true
  DBPassword:
    Type: String
    NoEcho: true
    Description: The password for the database

Conditions:
  HasCustomRole: !Not [!Equals [!Ref "Role", ""]]

Resources:
  # A log group for storing the stdout logs from this service's containers
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${EnvironmentName}-service-${ServiceName}

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow ECS tasks to connect to RDS"
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}:VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref "DBPort"
          ToPort: !Ref "DBPort"
          SourceSecurityGroupId:
            Fn::ImportValue: !Sub ${EnvironmentName}:ContainerSecurityGroup
        - IpProtocol: tcp
          FromPort: !Ref "DBPort"
          ToPort: !Ref "DBPort"
          CidrIp: 0.0.0.0/0 # ⚠️ Accessibile da internet per debug
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: !Ref "DBPort"
          ToPort: !Ref "DBPort"
          DestinationSecurityGroupId:
            Fn::ImportValue: !Sub ${EnvironmentName}:ContainerSecurityGroup
        - IpProtocol: tcp
          FromPort: !Ref "DBPort"
          ToPort: !Ref "DBPort"
          CidrIp: 0.0.0.0/0 # ⚠️

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: !Ref "DBInstanceClass"
      Engine: !Ref "DBEngine"
      DBInstanceIdentifier: !Sub ${EnvironmentName}-${ServiceName}-rds
      AllocatedStorage: !Ref "DBAllocatedStorage"
      Port: !Ref "DBPort"
      DBName: !Ref "DBName"
      MasterUsername: !Ref "DBUsername"
      MasterUserPassword: !Ref "DBPassword"
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref "DBSubnetGroup"
      MultiAZ: false
      StorageType: gp2
      BackupRetentionPeriod: 7
      DeletionProtection: false
      PubliclyAccessible: true

  # DB Subnet Group to define the subnets for the RDS instance
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for RDS instance"
      SubnetIds:
        - Fn::ImportValue: !Sub ${EnvironmentName}:PublicSubnetOne
        - Fn::ImportValue: !Sub ${EnvironmentName}:PublicSubnetTwo

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${EnvironmentName}-${ServiceName}
      Cpu: !Ref "ContainerCpu"
      Memory: !Ref "ContainerMemory"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue: !Sub ${EnvironmentName}:ECSTaskExecutionRole
      TaskRoleArn:
        Fn::If:
          - "HasCustomRole"
          - !Ref "Role"
          - !Ref "AWS::NoValue"
      ContainerDefinitions:
        - Name: !Ref "ServiceName"
          Cpu: !Ref "ContainerCpu"
          Memory: !Ref "ContainerMemory"
          Image: !Ref "ImageUrl"
          PortMappings:
            - ContainerPort: !Ref "ContainerPort"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Sub ${EnvironmentName}-service-${ServiceName}
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: !Ref "ServiceName"
          Environment:
            - Name: DB_HOSTNAME
              Value: !GetAtt RDSInstance.Endpoint.Address # l'url del database generato dinamicamente è passato come variabile d'ambiente
            - Name: DB_PORT
              Value: !Ref DBPort
            - Name: DB_NAME
              Value: !Ref DBName
            - Name: DB_USERNAME
              Value: !Ref DBUsername
            - Name: DB_PASSWORD
              Value: !Ref DBPassword

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      ServiceName: !Sub ${EnvironmentName}-${ServiceName}
      Cluster:
        Fn::ImportValue: !Sub ${EnvironmentName}:ClusterName
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref "DesiredCount"
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub ${EnvironmentName}:ContainerSecurityGroup
          Subnets:
            - Fn::ImportValue: !Sub ${EnvironmentName}:PublicSubnetOne
            - Fn::ImportValue: !Sub ${EnvironmentName}:PublicSubnetTwo
      TaskDefinition: !Ref "TaskDefinition"
      LoadBalancers:
        - ContainerName: !Ref "ServiceName"
          ContainerPort: !Ref "ContainerPort"
          TargetGroupArn: !Ref "TargetGroup"

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 4
      HealthyThresholdCount: 2
      TargetType: ip
      Port: !Ref "ContainerPort"
      Protocol: HTTP
      UnhealthyThresholdCount: 3
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}:VpcId
      TargetGroupAttributes:
        - Key: "deregistration_delay.timeout_seconds"
          Value: 5

  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref "TargetGroup"
          Type: "forward"
      Conditions:
        - Field: path-pattern
          Values: [!Ref "LoadBalancerPath"]
      ListenerArn:
        Fn::ImportValue: !Sub ${EnvironmentName}:PublicListener
      Priority: !Ref "LoadBalancerPriority"

Outputs:
  ServiceURL:
    Value:
      Fn::Join:
        - ""
        - - Fn::ImportValue: !Sub ${EnvironmentName}:ExternalUrl
          - !Join ["", !Split ["*", !Ref LoadBalancerPath]]
  DatabaseEndpoint:
    Description: The connection endpoint for the RDS instance
    Value: !GetAtt RDSInstance.Endpoint.Address
